ISA instructions:
!! 2 LSB is 1.


#########################################################
# LUI
#########################################################
  a) Format
      imm      rd      opcode
    [ 31:12 ][ 11:7 ][ 6:2 ]
  b) Opcodes
    LUI (LOAD UPPER IMMEDIATE) OPCODE=5'hD
  c) Description
    RD <= {IMM,12'b0}
  d) Base operations
    |IF|
      ADDR_IMEM = PC
      PC <= PC + 4
    |ID|
      {IMM,RD,OPCODE} = RDATA_IMEM,
      if(OPCODE == LUI)
        ex_bypass   <= 1
        out         <= {IMM,12'b0}
        ma_bypass   <= 1
        wb_bypass   <= 0
        wb_rf_addr  <= RD
      end
    |EX|
      if(ex_bypass)
        out <= in
      ma_bypass   <= ma_bypass
      wb_bypass   <= wb_bypass
      wb_rf_addr  <= wb_rf_addr
    |MA|
      if(ma_bypass)
        out <= in
      wb_bypass   <= wb_bypass
      wb_rf_addr  <= wb_rf_addr
    |WB|
      if(!wb_bypass) begin
        if(wb_ref_ext)
          wdata = in
        RF[wb_rf_addr] <= wdata
      end
#########################################################

#########################################################
# AUPIC
#########################################################
  a) Format
      imm      rd      opcode
    [ 31:12 ][ 11:7 ][ 6:2 ]
  b) Opcodes
    AUIPIC (ADD UPPER IMMEDIATE TO PC)      FUNCT3=3'h0 OPCODE=5'h4
  c) Description
    RD <= PC + {IMM,12'b0}
  d) Base operations
    |IF|
      ADDR_IMEM = PC
      PC  <= PC + 4
      out <= PC
    |ID|
      {IMM,RD,OPCODE} = RDATA_IMEM,
      if(OPCODE == AUPIC)
        ex_bypass     <= 0
        ex_op         <= add
        ex_op1        <= {IMM,12'b0}
        ex_op2        <= in
        ma_rd         <= 0
        ma_wr         <= 0
        wb_rf         <= 1
        wb_rf_addr    <= RD
      end
    |EX|
      if(ex_bypass)
        out <= in
      else begin
        alu_op  = ex_op
        out     <= alu_out
      end
      ma_bypass   <= ma_bypass
      wb_rf       <= wb_rf
      wb_rf_addr  <= wb_rf_addr
    |MA|
      if(ma_bypass)
        out <= in
      wb_rf      <= wb_rf
      wb_rf_addr <= wb_rf_addr
    |WB|
      if(wb_ref_ext)
      else
        wdata = in
      if(wb_rf)
        RF[wb_rf_addr] <= wdata
#########################################################


#########################################################
# LOAD
#########################################################
  a) Format
      imm      rs1      funct3   rd      opcode
    [ 31:20 ][ 19:15 ][ 14:12 ][ 11:7 ][ 6:2 ]
  b) Opcodes
    LB  (LOAD BYTE)               FUNCT3=3'h0 OPCODE=5'h0
    LH  (LOAD HALFWORD)           FUNCT3=3'h1 OPCODE=5'h0
    LW  (LOAD WORD)               FUNCT3=3'h2 OPCODE=5'h0
    LBU (LOAD BYTE UNSIGNED)      FUNCT3=3'h4 OPCODE=5'h0
    LHU (LOAD HALFWORD UNSIGNED)  FUNCT3=3'h5 OPCODE=5'h0
  c) Description
    RD <= DMEM[RS1+IMM];
  d) Base operations
    IF|
      ADDR_IMEM = PC
      PC <= PC + 4
    ID|
      {IMM,RS1,FUNCT3,RD,OPCODE} = instr
      if(OPCODE inside {LOAD}) begin
        ex_bypass           <= 0
        ex_op               <= add
        ex_op1              <= RF[RS1]
        ex_op2              <= IMM
        ma_bypass           <= 0
        ma_rd               <= 1
        ex_set_ma_addr      <= 1
        wb_bypass               <= 1
        wb_rf_addr          <= RD
        wb_rf_ext           <= (FUNCT3 inside {LB,LH,LBU,LHU})
        wb_rf_sign_or_zero  <= (FUNCT3 inside {LB,LH})
        wb_rf_byte_or_half  <= (FUNCT3 inside {LB,LBU})
      end
    EX|
      if(ex_bypass)
        out <= in
      else
        alu_op = ex_op
      if(ex_set_ma_addr)
        ma_addr <= alu_out
      ma_rd               <= ma_rd
      wb_bypass               <= wb_bypass
      wb_rf_addr          <= wb_rf_addr
      wb_rf_ext           <= wb_rf_ext
      wb_rf_sign_or_zero  <= wb_rf_sign_or_zero
      wb_rf_byte_or_half  <= wb_rf_byte_or_half
    MA|
      if(ma_rd)
        out <= DMEM[ma_addr]
      wb_bypass               <= wb_bypass
      wb_rf_addr          <= wb_rf_addr
      wb_rf_ext           <= wb_rf_ext
      wb_rf_sign_or_zero  <= wb_rf_sign_or_zero
      wb_rf_byte_or_half  <= wb_rf_byte_or_half
    WB|
      if(wb_rf_ext) begin
        case({wb_rf_sign_or_zero,wb_rf_byte_or_half}) begin
          2'b00: wdata = {16{1'b0},RDATA[15:0]}
          2'b01: wdata = {24{1'b0},RDATA[7:0]}
          2'b10: wdata = {17{RDATA[15]},RDATA[14:0]}
          2'b11: wdata = {25{RDATA[7]},RDATA[6:0]}
        end
      end else begin
        wdata = in
      end
      if(!wb_bypass)
        RF[wb_rf_addr] <= wdata
#########################################################

#########################################################
# STORE
#########################################################
  a) Format
      immhi    rs2      rs1    funct3   immlo   opcode
    [ 31:25 ][ 24:20 ][ 19:15 ][ 14:12 ][ 11:7 ][ 6:2 ]
  b) Opcodes
    SB (STORE BYTE)         FUNCT3=3'h0 OPCODE=5'h8
    SH (STORE HALFWORD)       FUNCT3=3'h1 OPCODE=5'h8
    SW (STORE WORD)         FUNCT3=3'h2 OPCODE=5'h8
  c) Description
    DMEM[RS1+IMM] <= RS2
  d) Base operations
    IF|
      ADDR_IMEM = PC
      PC <= PC + 4
    ID|
      {IMM,RS2,RS1,FUNCT3,OPCODE} = instr
      if(OPCODE inside {STORE}) begin
        ex_bypass           <= 0
        ex_op               <= add
        ex_op1              <= RF[RS1]
        ex_op2              <= IMM
        ex_set_ma_addr      <= 1
        ma_bypass           <= 0
        ma_rd               <= 0
        ma_wr               <= 1
        ma_wdata            <= (FUNCT3==3'h0) ? RF[RS2][7:0] : (FUNCT3==3'h1) ? RF[RS2][15:0] : (FUNCT3==3'h2) ? RF[RS2] : X
        wb_bypass           <= 1
        wb_rf_addr          <= RD
        wb_rf_ext           <= 0
      end
    EX|
      if(ex_bypass)
        out <= in
      else
        alu_op = ex_op
      if(ex_set_ma_addr)
        ma_addr <= alu_out
      ma_rd               <= ma_rd
      ma_wr               <= ma_wr
      wb_bypass           <= wb_bypass
      wb_rf_addr          <= wb_rf_addr
      wb_rf_ext           <= wb_rf_ext
      wb_rf_sign_or_zero  <= wb_rf_sign_or_zero
      wb_rf_byte_or_half  <= wb_rf_byte_or_half
    MA|
      if(ma_wr)
        DMEM[ma_addr] <= ma_wdata
    WB|
      if(!wb_bypass) begin
      end
#########################################################

# COMPUTATION REG-IMM
  imm      rs1      funct3   rd      opcode
[ 31:20 ][ 19:15 ][ 14:12 ][ 11:7 ][ 6:2 ]
b) Opcodes
ADDI (ADD IMMEDIATE)            FUNCT3=3'h0 OPCODE=5'h4
SLTI (SET LESS THAN IMMEDIATE)        FUNCT3=3'h2 OPCODE=5'h4
SLTIU (SET LESS THAN IMMEDIATE UNSIDGNED) FUNCT3=3'h3 OPCODE=5'h4
XORI (XOR IMMEDIATE)            FUNCT3=3'h4 OPCODE=5'h4
ORI (OR IMMEDIATE)              FUNCT3=3'h6 OPCODE=5'h4
ANDI (AND IMMEDIATE)            FUNCT3=3'h7 OPCODE=5'h4
c) Description
RD <= RS1 +^|& IMM
RD <= (RS1 < IMM)
d) Base operations
IF| read INSTR from IMEM[PC], PC <= PC + 4
ID| {IMM,RS1,FUNCT3,RD,OPCODE} = instr, read RS1, sign-extended or zero-extended
EX| RESULT = RS1 +^|& IMM
MA| .
WB| RD <= RESULT





# UNCONDITIONAL JUMPS
a) Format
b) Opcodes
JAL (JUMP AND LINK)
JALR (JUMP AND LINK REG)
c) Description

d) Base operations
IF|
ID|
EX|
MA|
WB|

# CONDITIONAL JUMPS
a) Format
  imm      rs1      funct3   rd      opcode
[ 31:20 ][ 19:15 ][ 14:12 ][ 11:7 ][ 6:2 ]
b) Opcodes
BEQ (BRANCH IF EQUAL)
BNE (BRANCH IF NOT EQUAL)
BLT (BRANCH LESS THAN)
BLTU (BRANCH LESS THAN UNSIGNED)
BGE (BRANCH IF GREATER THAN OR EQUAL)
BGEU (BRANCH IF GREATER THAN OR EQUAL USIGNED)
c) Description

d) Base operations
IF|
ID|
EX|
MA|
WB|

#
a) Format

b) Opcodes

c) Description

d) Base operations
IF|
ID|
EX|
MA|
WB|





beq     bimm12hi rs1 rs2 bimm12lo 14..12=0 6..2=0x18 1..0=3
bne     bimm12hi rs1 rs2 bimm12lo 14..12=1 6..2=0x18 1..0=3
blt     bimm12hi rs1 rs2 bimm12lo 14..12=4 6..2=0x18 1..0=3
bge     bimm12hi rs1 rs2 bimm12lo 14..12=5 6..2=0x18 1..0=3
bltu    bimm12hi rs1 rs2 bimm12lo 14..12=6 6..2=0x18 1..0=3
bgeu    bimm12hi rs1 rs2 bimm12lo 14..12=7 6..2=0x18 1..0=3

jalr    rd rs1 imm12              14..12=0 6..2=0x19 1..0=3

jal     rd jimm20                          6..2=0x1b 1..0=3
jal

lui     rd imm20 6..2=0x0D 1..0=3
auipc   rd imm20 6..2=0x05 1..0=3

addi    rd rs1 imm12           14..12=0 6..2=0x04 1..0=3
slli    rd rs1 31..26=0  shamt 14..12=1 6..2=0x04 1..0=3
slti    rd rs1 imm12           14..12=2 6..2=0x04 1..0=3
sltiu   rd rs1 imm12           14..12=3 6..2=0x04 1..0=3
xori    rd rs1 imm12           14..12=4 6..2=0x04 1..0=3
srli    rd rs1 31..26=0  shamt 14..12=5 6..2=0x04 1..0=3
srai    rd rs1 31..26=16 shamt 14..12=5 6..2=0x04 1..0=3
ori     rd rs1 imm12           14..12=6 6..2=0x04 1..0=3
andi    rd rs1 imm12           14..12=7 6..2=0x04 1..0=3

add     rd rs1 rs2 31..25=0  14..12=0 6..2=0x0C 1..0=3
sub     rd rs1 rs2 31..25=32 14..12=0 6..2=0x0C 1..0=3
sll     rd rs1 rs2 31..25=0  14..12=1 6..2=0x0C 1..0=3
slt     rd rs1 rs2 31..25=0  14..12=2 6..2=0x0C 1..0=3
sltu    rd rs1 rs2 31..25=0  14..12=3 6..2=0x0C 1..0=3
xor     rd rs1 rs2 31..25=0  14..12=4 6..2=0x0C 1..0=3
srl     rd rs1 rs2 31..25=0  14..12=5 6..2=0x0C 1..0=3
sra     rd rs1 rs2 31..25=32 14..12=5 6..2=0x0C 1..0=3
or      rd rs1 rs2 31..25=0  14..12=6 6..2=0x0C 1..0=3
and     rd rs1 rs2 31..25=0  14..12=7 6..2=0x0C 1..0=3

addiw   rd rs1 imm12            14..12=0 6..2=0x06 1..0=3
slliw   rd rs1 31..25=0  shamtw 14..12=1 6..2=0x06 1..0=3
srliw   rd rs1 31..25=0  shamtw 14..12=5 6..2=0x06 1..0=3
sraiw   rd rs1 31..25=32 shamtw 14..12=5 6..2=0x06 1..0=3

addw    rd rs1 rs2 31..25=0  14..12=0 6..2=0x0E 1..0=3
subw    rd rs1 rs2 31..25=32 14..12=0 6..2=0x0E 1..0=3
sllw    rd rs1 rs2 31..25=0  14..12=1 6..2=0x0E 1..0=3
srlw    rd rs1 rs2 31..25=0  14..12=5 6..2=0x0E 1..0=3
sraw    rd rs1 rs2 31..25=32 14..12=5 6..2=0x0E 1..0=3

# LOAD
format
  imm      rs1      funct3   rd      opcode
[ 31:20 ][ 19:15 ][ 14:12 ][ 11:7 ][ 6:2 ]
LB  (LOAD BYTE)         FUNCT3=3'h0 OPCODE=5'h0
LH  (LOAD HALFWORD)       FUNCT3=3'h1 OPCODE=5'h0
LW  (LOAD WORD)         FUNCT3=3'h2 OPCODE=5'h0
LD  (LOAD DOUBLEWORD)       FUNCT3=3'h3 OPCODE=5'h0
LBU (LOAD BYTE UNSIGNED)      FUNCT3=3'h4 OPCODE=5'h0
LHU (LOAD HALFWORD UNSIGNED)   FUNCT3=3'h5 OPCODE=5'h0
LWU (LOAD WORD UNSIGNED)      FUNCT3=3'h6 OPCODE=5'h0


lb      rd rs1       imm12 14..12=0 6..2=0x00 1..0=3
lh      rd rs1       imm12 14..12=1 6..2=0x00 1..0=3
lw      rd rs1       imm12 14..12=2 6..2=0x00 1..0=3
ld      rd rs1       imm12 14..12=3 6..2=0x00 1..0=3
lbu     rd rs1       imm12 14..12=4 6..2=0x00 1..0=3
lhu     rd rs1       imm12 14..12=5 6..2=0x00 1..0=3
lwu     rd rs1       imm12 14..12=6 6..2=0x00 1..0=3

sb     imm12hi rs1 rs2 imm12lo 14..12=0 6..2=0x08 1..0=3
sh     imm12hi rs1 rs2 imm12lo 14..12=1 6..2=0x08 1..0=3
sw     imm12hi rs1 rs2 imm12lo 14..12=2 6..2=0x08 1..0=3
SW (STORE WORD)
  31:25 IMM_HI
  24:20 RS2
  19:15 RS1
  14:12 FUNCT3  = {3'h2}
  11:07 IMM_LO
  06:00 OPCODE = {5'h8 , 2'h3}

sd     imm12hi rs1 rs2 imm12lo 14..12=3 6..2=0x08 1..0=3

fence       fm            pred succ     rs1 14..12=0 rd 6..2=0x03 1..0=3
fence.i     imm12                       rs1 14..12=1 rd 6..2=0x03 1..0=3